// Code generated by "stringer -type=HookLifecycle,HookType -output hook_string.go"; DO NOT EDIT.

package geezer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[HookBefore-0]
	_ = x[HookAfter-1]
	_ = x[HookError-2]
}

const _HookLifecycle_name = "HookBeforeHookAfterHookError"

var _HookLifecycle_index = [...]uint8{0, 10, 19, 28}

func (i HookLifecycle) String() string {
	if i < 0 || i >= HookLifecycle(len(_HookLifecycle_index)-1) {
		return "HookLifecycle(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _HookLifecycle_name[_HookLifecycle_index[i]:_HookLifecycle_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[HookAll-0]
	_ = x[HookFind-1]
	_ = x[HookGet-2]
	_ = x[HookCreate-3]
	_ = x[HookUpdate-4]
	_ = x[HookPatch-5]
	_ = x[HookRemove-6]
}

const _HookType_name = "HookAllHookFindHookGetHookCreateHookUpdateHookPatchHookRemove"

var _HookType_index = [...]uint8{0, 7, 15, 22, 32, 42, 51, 61}

func (i HookType) String() string {
	if i < 0 || i >= HookType(len(_HookType_index)-1) {
		return "HookType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _HookType_name[_HookType_index[i]:_HookType_index[i+1]]
}
